1)
You are provided a string of words and a 2-digit number. The two digits of the number represent the two words that are to be processed.

For example:

If the string is "Today is a Nice Day" and the 2-digit number is 41, then you are expected to process the 4th word ("Nice") and the 1st word ("Today").

The processing of each word is to be done as follows:

Extract the Middle-to-Begin part: Starting from the middle of the word, extract the characters till the beginning of the word.

Extract the Middle-to-End part: Starting from the middle of the word, extract the characters till the end of the word.

If the word to be processed is "Nice":

Its Middle-to-Begin part will be "iN".

Its Middle-to-End part will be "ce".

So, merged together these two parts would form "iNce".

Similarly, if the word to be processed is "Today":

Its Middle-to-Begin part will be "doT".

Its Middle-to-End part will be "day".

So, merged together these two parts would form "doTday".

Note: Note that the middle letter 'd' is part of both the extracted parts. So, for words whose length is odd, the middle letter should be included in both the extracted parts.

Expected output:

The expected output is a string containing both the processed words separated by a space "iNce doTday"

Example 1:

input1 = "Today is a Nice Day"

input2 = 41

output = "iNce doTday"

Example 2:

input1 = "Fruits like Mango and Apple are common but Grapes are rare"

input2 = 39

output = "naMngo arGpes"

Note: The input string input1 will contain only alphabets and a single space character separating each word in the string.

Note: The input string input1 will NOT contain any other special characters.

Note: The input number input2 will always be a 2-digit number (>=11 and <=99). One of its digits will never be 0. Both the digits of the number will always point to a valid word in the input1 string.
import java.util.Scanner;

public class WordProcessor {

    public static String processWord(String word) {
        int length = word.length();
        int middle = length / 2;

        // Adjust middle index for even and odd lengths
        String middleToBegin;
        String middleToEnd;

        if (length % 2 == 0) {
            // For even lengths, take the two middle characters
            middleToBegin = new StringBuilder(word.substring(0, middle)).reverse().toString();
            middleToEnd = word.substring(middle);
        } else {
            // For odd lengths, the middle character is included in both parts
            middleToBegin = new StringBuilder(word.substring(0, middle + 1)).reverse().toString();
            middleToEnd = word.substring(middle);
        }

        return middleToBegin + middleToEnd;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the input string
        String input1 = scanner.nextLine();

        // Read the 2-digit number
        int input2 = scanner.nextInt();

        // Extract words from the input string
        String[] words = input1.split(" ");

        // Get the indices from the input number
        int firstIndex = Character.getNumericValue(String.valueOf(input2).charAt(0)) - 1; // Convert to 0-based index
        int secondIndex = Character.getNumericValue(String.valueOf(input2).charAt(1)) - 1; // Convert to 0-based index

        // Process the selected words
        String processedFirstWord = processWord(words[firstIndex]);
        String processedSecondWord = processWord(words[secondIndex]);

        // Combine results
        String result = processedFirstWord + " " + processedSecondWord;

        // Print the output
        System.out.println(result);

        scanner.close();
    }
}

	Input	Expected	Got	
Today is a Nice Day
41
iNce doTday
iNce doTday
Fruits like Mango and Apple are common but Grapes are rare
39
naMngo arGpes
naMngo arGpes

2)
Given 2 strings input1 & input2.

·       Concatenate both the strings.

·       Remove duplicate alphabets & white spaces.

·       Arrange the alphabets in descending order.

Assumption 1:

There will either be alphabets, white spaces or null in both the inputs.

Assumption 2:

Both inputs will be in lower case.

Example 1:

Input 1: apple

Input 2: orange

Output: rponlgea

Example 2:

Input 1: fruits

Input 2: are good

Output: utsroigfeda

Example 3:

Input 1: ""

Input 2: ""

Output: null
import java.util.LinkedHashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.Arrays;

public class StringProcessor {

    public static String processStrings(String input1, String input2) {
        // Concatenate the two inputs
        String concatenated = input1 + input2;

        // Use a Set to remove duplicates and ignore spaces
        Set<Character> uniqueChars = new LinkedHashSet<>();
        for (char c : concatenated.toCharArray()) {
            if (c != ' ') { // Ignore spaces
                uniqueChars.add(c);
            }
        }

        // Create an array of characters and sort them in descending order
        Character[] charsArray = uniqueChars.toArray(new Character[0]);
        Arrays.sort(charsArray, (a, b) -> b.compareTo(a));

        // Build the final output string
        StringBuilder output = new StringBuilder();
        for (char c : charsArray) {
            output.append(c);
        }

        return output.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read first input
        String input1 = scanner.nextLine();

        // Read second input
        String input2 = scanner.nextLine();
        
        // Check if both inputs are empty
        if (input1.trim().isEmpty() && input2.trim().isEmpty()) {
            System.out.println("null");
        } else {
            // Process the inputs
            String result = processStrings(input1, input2);

            // Print the result
            System.out.println(result);
        }

        scanner.close();
    }
}
Test	Input	Expected	Got	
1
apple
orange
rponlgea
rponlgea
2
fruits
are good
utsroigfeda
utsroigfeda
3
null
null
3)
Given a String input1, which contains many number of words separated by : and each word contains exactly two lower case alphabets, generate an output based upon the below 2 cases.

Note:

1.      All the characters in input 1 are lowercase alphabets.

2.      input 1 will always contain more than one word separated by :

3.      Output should be returned in uppercase.

Case 1:

Check whether the two alphabets are same.

If yes, then take one alphabet from it and add it to the output.

Example 1:

input1 = ww:ii:pp:rr:oo

output = WIPRO

Explanation:

word1 is ww, both are same hence take w

word2 is ii, both are same hence take i

word3 is pp, both are same hence take p

word4 is rr, both are same hence take r

word5 is oo, both are same hence take o

Hence the output is WIPRO

Case 2:

If the two alphabets are not same, then find the position value of them and find maximum value – minimum value.

Take the alphabet which comes at this (maximum value - minimum value) position in the alphabet series.

Example 2”

input1 = zx:za:ee

output = BYE

Explanation

word1 is zx, both are not same alphabets

position value of z is 26

position value of x is 24

max – min will be 26 – 24 = 2

Alphabet which comes in 2nd position is b

Word2 is za, both are not same alphabets

position value of z is 26

position value of a is 1

max – min will be 26 – 1 = 25

Alphabet which comes in 25th position is y

word3 is ee, both are same hence take e

Hence the output is BYE
import java.util.Scanner;

public class StringProcessor {

    public static String processInput(String input) {
        StringBuilder output = new StringBuilder();
        String[] words = input.split(":");

        for (String word : words) {
            if (word.length() != 2) {
                throw new IllegalArgumentException("Each word must contain exactly two characters.");
            }
            char firstChar = word.charAt(0);
            char secondChar = word.charAt(1);

            if (firstChar == secondChar) {
                // Case 1: Both characters are the same
                output.append(Character.toUpperCase(firstChar));
            } else {
                // Case 2: Characters are different
                int pos1 = firstChar - 'a' + 1;
                int pos2 = secondChar - 'a' + 1;

                // Calculate max - min
                int difference = Math.max(pos1, pos2) - Math.min(pos1, pos2);

                // Find the character at that position
                char resultChar = (char) ('a' + difference - 1); // -1 for 0-based index
                output.append(Character.toUpperCase(resultChar));
            }
        }

        return output.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Check if there are two lines of input
        if (scanner.hasNextLine()) {
            String input1 = scanner.nextLine();
            String result1 = processInput(input1);
            System.out.println(result1);
        }

        if (scanner.hasNextLine()) {
            String input2 = scanner.nextLine();
            String result2 = processInput(input2);
            System.out.println(result2);
        }

        scanner.close();
    }
}
Input	Expected	Got	
ww:ii:pp:rr:oo
WIPRO
WIPRO
zx:za:ee
BYE
BYE
